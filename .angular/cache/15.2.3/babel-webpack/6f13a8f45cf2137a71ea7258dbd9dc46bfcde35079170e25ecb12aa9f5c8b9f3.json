{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class ContactoComponent {\n  constructor() {\n    this.contactos = [{\n      nombre: 'Juan Pérez',\n      email: 'juan.perez@example.com'\n    }, {\n      nombre: 'Ana Gómez',\n      email: 'ana.gomez@example.com'\n    }, {\n      nombre: 'Luis Sánchez',\n      email: 'luis.sanchez@example.com'\n    }, {\n      nombre: 'Carlos Martínez',\n      email: 'carlos.martinez@example.com'\n    }, {\n      nombre: 'Laura Rodríguez',\n      email: 'laura.rodriguez@example.com'\n    }, {\n      nombre: 'Pedro Fernández',\n      email: 'pedro.fernandez@example.com'\n    }, {\n      nombre: 'Marta López',\n      email: 'marta.lopez@example.com'\n    }, {\n      nombre: 'José González',\n      email: 'jose.gonzalez@example.com'\n    }, {\n      nombre: 'Sofía Pérez',\n      email: 'sofia.perez@example.com'\n    }, {\n      nombre: 'Carlos Díaz',\n      email: 'carlos.diaz@example.com'\n    }];\n    this.filtro = '';\n  }\n  ngAfterViewInit() {\n    this.mostrarContactos();\n  }\n  mostrarContactos() {\n    const lista = document.getElementById('lista-contactos');\n    if (lista) {\n      lista.innerHTML = ''; // Limpiar lista antes de actualizar\n      this.contactos.forEach(contacto => {\n        if (this.filtro === '' || contacto.nombre.toLowerCase().includes(this.filtro.toLowerCase()) || contacto.email.toLowerCase().includes(this.filtro.toLowerCase())) {\n          const li = document.createElement('li');\n          li.className = 'list-group-item';\n          li.innerHTML = `<strong>${contacto.nombre}</strong> - ${contacto.email}`;\n          lista.appendChild(li);\n        }\n      });\n    }\n  }\n  actualizarFiltro(event) {\n    this.filtro = event.target.value;\n    this.mostrarContactos();\n  }\n}\nContactoComponent.ɵfac = function ContactoComponent_Factory(t) {\n  return new (t || ContactoComponent)();\n};\nContactoComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ContactoComponent,\n  selectors: [[\"app-contacto\"]],\n  decls: 7,\n  vars: 0,\n  consts: [[1, \"contact-container\"], [\"type\", \"text\", \"placeholder\", \"Buscar...\", 1, \"form-control\", \"mb-3\", 3, \"input\"], [\"id\", \"lista-contactos\", 1, \"list-group\"]],\n  template: function ContactoComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h1\");\n      i0.ɵɵtext(1, \"Lista de Contactos\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"p\");\n      i0.ɵɵtext(3, \"Puedes buscar por nombre o correo electr\\u00F3nico.\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"div\", 0)(5, \"input\", 1);\n      i0.ɵɵlistener(\"input\", function ContactoComponent_Template_input_input_5_listener($event) {\n        return ctx.actualizarFiltro($event);\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(6, \"ul\", 2);\n      i0.ɵɵelementEnd();\n    }\n  },\n  styles: [\".contact-container[_ngcontent-%COMP%] {\\r\\n    margin-top: 20px;\\r\\n  }\\r\\n  \\r\\n  .contact-container[_ngcontent-%COMP%]   input[_ngcontent-%COMP%] {\\r\\n    margin-bottom: 15px;\\r\\n    width: 100%;\\r\\n  }\\r\\n  \\r\\n  .contact-container[_ngcontent-%COMP%]   ul[_ngcontent-%COMP%] {\\r\\n    padding: 0;\\r\\n  }\\r\\n  \\r\\n  .contact-container[_ngcontent-%COMP%]   li[_ngcontent-%COMP%] {\\r\\n    margin: 5px 0;\\r\\n  }\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvcGFnZXMvY29udGFjdG8vY29udGFjdG8uY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLGdCQUFnQjtFQUNsQjs7RUFFQTtJQUNFLG1CQUFtQjtJQUNuQixXQUFXO0VBQ2I7O0VBRUE7SUFDRSxVQUFVO0VBQ1o7O0VBRUE7SUFDRSxhQUFhO0VBQ2YiLCJzb3VyY2VzQ29udGVudCI6WyIuY29udGFjdC1jb250YWluZXIge1xyXG4gICAgbWFyZ2luLXRvcDogMjBweDtcclxuICB9XHJcbiAgXHJcbiAgLmNvbnRhY3QtY29udGFpbmVyIGlucHV0IHtcclxuICAgIG1hcmdpbi1ib3R0b206IDE1cHg7XHJcbiAgICB3aWR0aDogMTAwJTtcclxuICB9XHJcbiAgXHJcbiAgLmNvbnRhY3QtY29udGFpbmVyIHVsIHtcclxuICAgIHBhZGRpbmc6IDA7XHJcbiAgfVxyXG4gIFxyXG4gIC5jb250YWN0LWNvbnRhaW5lciBsaSB7XHJcbiAgICBtYXJnaW46IDVweCAwO1xyXG4gIH1cclxuICAiXSwic291cmNlUm9vdCI6IiJ9 */\"]\n});","map":{"version":3,"mappings":";AAOA,OAAM,MAAOA,iBAAiB;EAL9BC;IAME,cAAS,GAAG,CACV;MAAEC,MAAM,EAAE,YAAY;MAAEC,KAAK,EAAE;IAAwB,CAAE,EACzD;MAAED,MAAM,EAAE,WAAW;MAAEC,KAAK,EAAE;IAAuB,CAAE,EACvD;MAAED,MAAM,EAAE,cAAc;MAAEC,KAAK,EAAE;IAA0B,CAAE,EAC7D;MAAED,MAAM,EAAE,iBAAiB;MAAEC,KAAK,EAAE;IAA6B,CAAE,EACnE;MAAED,MAAM,EAAE,iBAAiB;MAAEC,KAAK,EAAE;IAA6B,CAAE,EACnE;MAAED,MAAM,EAAE,iBAAiB;MAAEC,KAAK,EAAE;IAA6B,CAAE,EACnE;MAAED,MAAM,EAAE,aAAa;MAAEC,KAAK,EAAE;IAAyB,CAAE,EAC3D;MAAED,MAAM,EAAE,eAAe;MAAEC,KAAK,EAAE;IAA2B,CAAE,EAC/D;MAAED,MAAM,EAAE,aAAa;MAAEC,KAAK,EAAE;IAAyB,CAAE,EAC3D;MAAED,MAAM,EAAE,aAAa;MAAEC,KAAK,EAAE;IAAyB,CAAE,CAC5D;IAED,WAAM,GAAW,EAAE;;EAEnBC,eAAe;IACb,IAAI,CAACC,gBAAgB,EAAE;EACzB;EAEAA,gBAAgB;IACd,MAAMC,KAAK,GAAGC,QAAQ,CAACC,cAAc,CAAC,iBAAiB,CAAC;IACxD,IAAIF,KAAK,EAAE;MACTA,KAAK,CAACG,SAAS,GAAG,EAAE,CAAC,CAAC;MAEtB,IAAI,CAACC,SAAS,CAACC,OAAO,CAACC,QAAQ,IAAG;QAChC,IAAI,IAAI,CAACC,MAAM,KAAK,EAAE,IAAID,QAAQ,CAACV,MAAM,CAACY,WAAW,EAAE,CAACC,QAAQ,CAAC,IAAI,CAACF,MAAM,CAACC,WAAW,EAAE,CAAC,IAAIF,QAAQ,CAACT,KAAK,CAACW,WAAW,EAAE,CAACC,QAAQ,CAAC,IAAI,CAACF,MAAM,CAACC,WAAW,EAAE,CAAC,EAAE;UAC/J,MAAME,EAAE,GAAGT,QAAQ,CAACU,aAAa,CAAC,IAAI,CAAC;UACvCD,EAAE,CAACE,SAAS,GAAG,iBAAiB;UAChCF,EAAE,CAACP,SAAS,GAAG,WAAWG,QAAQ,CAACV,MAAM,eAAeU,QAAQ,CAACT,KAAK,EAAE;UACxEG,KAAK,CAACa,WAAW,CAACH,EAAE,CAAC;;MAEzB,CAAC,CAAC;;EAEN;EAEAI,gBAAgB,CAACC,KAAY;IAC3B,IAAI,CAACR,MAAM,GAAIQ,KAAK,CAACC,MAA2B,CAACC,KAAK;IACtD,IAAI,CAAClB,gBAAgB,EAAE;EACzB;;AAvCWL,iBAAiB;mBAAjBA,iBAAiB;AAAA;AAAjBA,iBAAiB;QAAjBA,iBAAiB;EAAAwB;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCP9BC,0BAAI;MAAAA,kCAAkB;MAAAA,iBAAK;MAC3BA,yBAAG;MAAAA,mEAA8C;MAAAA,iBAAI;MAErDA,8BAA+B;MACwCA;QAAA,OAASC,4BAAwB;MAAA,EAAC;MAAvGD,iBAAwG;MAExGA,wBAEK;MACPA,iBAAM","names":["ContactoComponent","constructor","nombre","email","ngAfterViewInit","mostrarContactos","lista","document","getElementById","innerHTML","contactos","forEach","contacto","filtro","toLowerCase","includes","li","createElement","className","appendChild","actualizarFiltro","event","target","value","selectors","decls","vars","consts","template","i0","ctx"],"sourceRoot":"","sources":["C:\\Users\\Abdias\\Documents\\API-Rick-and-Morty-main\\src\\app\\pages\\contacto\\contacto.component.ts","C:\\Users\\Abdias\\Documents\\API-Rick-and-Morty-main\\src\\app\\pages\\contacto\\contacto.component.html"],"sourcesContent":["import { Component, AfterViewInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-contacto',\r\n  templateUrl: './contacto.component.html',\r\n  styleUrls: ['./contacto.component.css']\r\n})\r\nexport class ContactoComponent implements AfterViewInit {\r\n  contactos = [\r\n    { nombre: 'Juan Pérez', email: 'juan.perez@example.com' },\r\n    { nombre: 'Ana Gómez', email: 'ana.gomez@example.com' },\r\n    { nombre: 'Luis Sánchez', email: 'luis.sanchez@example.com' },\r\n    { nombre: 'Carlos Martínez', email: 'carlos.martinez@example.com' },\r\n    { nombre: 'Laura Rodríguez', email: 'laura.rodriguez@example.com' },\r\n    { nombre: 'Pedro Fernández', email: 'pedro.fernandez@example.com' },\r\n    { nombre: 'Marta López', email: 'marta.lopez@example.com' },\r\n    { nombre: 'José González', email: 'jose.gonzalez@example.com' },\r\n    { nombre: 'Sofía Pérez', email: 'sofia.perez@example.com' },\r\n    { nombre: 'Carlos Díaz', email: 'carlos.diaz@example.com' }\r\n  ];\r\n\r\n  filtro: string = '';\r\n\r\n  ngAfterViewInit(): void {\r\n    this.mostrarContactos();\r\n  }\r\n\r\n  mostrarContactos(): void {\r\n    const lista = document.getElementById('lista-contactos');\r\n    if (lista) {\r\n      lista.innerHTML = ''; // Limpiar lista antes de actualizar\r\n\r\n      this.contactos.forEach(contacto => {\r\n        if (this.filtro === '' || contacto.nombre.toLowerCase().includes(this.filtro.toLowerCase()) || contacto.email.toLowerCase().includes(this.filtro.toLowerCase())) {\r\n          const li = document.createElement('li');\r\n          li.className = 'list-group-item';\r\n          li.innerHTML = `<strong>${contacto.nombre}</strong> - ${contacto.email}`;\r\n          lista.appendChild(li);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  actualizarFiltro(event: Event): void {\r\n    this.filtro = (event.target as HTMLInputElement).value;\r\n    this.mostrarContactos();\r\n  }\r\n}\r\n","<h1>Lista de Contactos</h1>\r\n<p>Puedes buscar por nombre o correo electrónico.</p>\r\n\r\n<div class=\"contact-container\">\r\n  <input type=\"text\" class=\"form-control mb-3\" placeholder=\"Buscar...\" (input)=\"actualizarFiltro($event)\">\r\n\r\n  <ul id=\"lista-contactos\" class=\"list-group\">\r\n    <!-- La lista de contactos se generará aquí desde TypeScript -->\r\n  </ul>\r\n</div>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}